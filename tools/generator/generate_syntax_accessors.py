import subprocess

from node_definitions import syntax_nodes, Node_Kind, Lookup_Kind

def generate_accessors(parameters):
    for member in parameters["members"]:
        syntax_name = parameters["syntax_name"]
        declaration = f"[[nodiscard]] SNOT const* get_{syntax_name}_{member.name}(SNOT const* node);"
        if member.optional:
            function_end = "return nullptr;"
        else:
            function_end = f'ANTON_UNREACHABLE("member {member.index} not present in {syntax_name}");'

        if member.lookup == Lookup_Kind.search:
            condition = f'child->kind == SNOT_Kind::{member.index}'
        else:
            condition = f'index == {member.index}'
        definition = f'''\
SNOT const* get_{syntax_name}_{member.name}(SNOT const* node) {{
    ANTON_ASSERT(node->kind == SNOT_Kind::{syntax_name}, "node is not {syntax_name}");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {{
      if({condition}) {{
        return child{"->children" if member.unwrap else ""};
      }}
      child = anton::ilist_next(child);
      index += 1;
    }}
    {function_end}
}}'''
        yield declaration, definition

def write_header_preamble(file):
    preamble = '''\
// This file has been autogenerated.
// Do not modify manually.
//
#pragma once

#include <anton/optional.hpp>
#include <vush_syntax/syntax.hpp>

namespace vush {'''
    file.write(preamble)

def write_header_epilogue(file):
    file.write("}\n")

def write_source_preamble(file):
    preamble = '''\
// This file has been autogenerated.
// Do not modify manually.
//
#include <anton/optional.hpp>
#include <vush_syntax/syntax.hpp>

namespace vush {'''
    file.write(preamble)

def write_source_epilogue(file):
    file.write("}\n")

def main():
    header = open("./compiler/vush_autogen/syntax_accessors.hpp", "w")
    source = open("./compiler/vush_autogen/syntax_accessors.cpp", "w")

    write_header_preamble(header)
    write_source_preamble(source)
    for parameters in syntax_nodes:
        for accessor_header, accessor_source in generate_accessors(parameters):
            header.write("\n")
            header.write(accessor_header)

            source.write("\n")
            source.write(accessor_source)
            source.write("\n")
    write_header_epilogue(header)
    write_source_epilogue(source)

    header.close()
    source.close()

    process = subprocess.run(["clang-format", "-i", "./compiler/vush_autogen/syntax_accessors.hpp", "./compiler/vush_autogen/syntax_accessors.cpp"])
    process.check_returncode()

main()
