// This file has been autogenerated.
// Do not modify manually.
//

#include <anton/flat_hash_map.hpp>

#include <vush_ast/ast.hpp>
#include <vush_core/memory.hpp>

#define BUILTIN_TYPE(identifier, value)              \
  static ast::Type_Builtin identifier(Source_Info{}, \
                                      ast::Type_Builtin_Kind::value)
#define ALLOC_PARAM(name, type)                                              \
  VUSH_ALLOCATE(ast::Fn_Parameter, allocator, ast::Attr_List{},              \
                ast::Identifier{name, {}}, type, ast::Identifier{""_sv, {}}, \
                Source_Info{})
#define ALLOC_ARRAY_PARAM(...)                                   \
  VUSH_ALLOCATE(Array<ast::Fn_Parameter*>, allocator, allocator, \
                anton::variadic_construct __VA_OPT__(, ) __VA_ARGS__)
#define ALLOC_FUNCTION(identifier, return_type, parameter_array)               \
  VUSH_ALLOCATE(ast::Decl_Function, allocator, ast::Attr_List{},               \
                ast::Identifier{identifier, {}}, parameter_array, return_type, \
                {}, true, Source_Info{})

namespace vush {
  using namespace anton::literals;

  BUILTIN_TYPE(builtin_void, e_void);
  BUILTIN_TYPE(builtin_bool, e_bool);
  BUILTIN_TYPE(builtin_int, e_int);
  BUILTIN_TYPE(builtin_uint, e_uint);
  BUILTIN_TYPE(builtin_float, e_float);
  BUILTIN_TYPE(builtin_double, e_double);
  BUILTIN_TYPE(builtin_vec2, e_vec2);
  BUILTIN_TYPE(builtin_vec3, e_vec3);
  BUILTIN_TYPE(builtin_vec4, e_vec4);
  BUILTIN_TYPE(builtin_dvec2, e_dvec2);
  BUILTIN_TYPE(builtin_dvec3, e_dvec3);
  BUILTIN_TYPE(builtin_dvec4, e_dvec4);
  BUILTIN_TYPE(builtin_bvec2, e_bvec2);
  BUILTIN_TYPE(builtin_bvec3, e_bvec3);
  BUILTIN_TYPE(builtin_bvec4, e_bvec4);
  BUILTIN_TYPE(builtin_ivec2, e_ivec2);
  BUILTIN_TYPE(builtin_ivec3, e_ivec3);
  BUILTIN_TYPE(builtin_ivec4, e_ivec4);
  BUILTIN_TYPE(builtin_uvec2, e_uvec2);
  BUILTIN_TYPE(builtin_uvec3, e_uvec3);
  BUILTIN_TYPE(builtin_uvec4, e_uvec4);
  BUILTIN_TYPE(builtin_mat2, e_mat2);
  BUILTIN_TYPE(builtin_mat3, e_mat3);
  BUILTIN_TYPE(builtin_mat4, e_mat4);
  BUILTIN_TYPE(builtin_mat2x3, e_mat2x3);
  BUILTIN_TYPE(builtin_mat2x4, e_mat2x4);
  BUILTIN_TYPE(builtin_mat3x2, e_mat3x2);
  BUILTIN_TYPE(builtin_mat3x4, e_mat3x4);
  BUILTIN_TYPE(builtin_mat4x2, e_mat4x2);
  BUILTIN_TYPE(builtin_mat4x3, e_mat4x3);
  BUILTIN_TYPE(builtin_dmat2, e_dmat2);
  BUILTIN_TYPE(builtin_dmat3, e_dmat3);
  BUILTIN_TYPE(builtin_dmat4, e_dmat4);
  BUILTIN_TYPE(builtin_dmat2x3, e_dmat2x3);
  BUILTIN_TYPE(builtin_dmat2x4, e_dmat2x4);
  BUILTIN_TYPE(builtin_dmat3x2, e_dmat3x2);
  BUILTIN_TYPE(builtin_dmat3x4, e_dmat3x4);
  BUILTIN_TYPE(builtin_dmat4x2, e_dmat4x2);
  BUILTIN_TYPE(builtin_dmat4x3, e_dmat4x3);
  BUILTIN_TYPE(builtin_sampler1D, e_sampler1D);
  BUILTIN_TYPE(builtin_texture1D, e_texture1D);
  BUILTIN_TYPE(builtin_image1D, e_image1D);
  BUILTIN_TYPE(builtin_sampler1DShadow, e_sampler1DShadow);
  BUILTIN_TYPE(builtin_sampler1DArray, e_sampler1DArray);
  BUILTIN_TYPE(builtin_texture1DArray, e_texture1DArray);
  BUILTIN_TYPE(builtin_image1DArray, e_image1DArray);
  BUILTIN_TYPE(builtin_sampler1DArrayShadow, e_sampler1DArrayShadow);
  BUILTIN_TYPE(builtin_sampler2D, e_sampler2D);
  BUILTIN_TYPE(builtin_texture2D, e_texture2D);
  BUILTIN_TYPE(builtin_image2D, e_image2D);
  BUILTIN_TYPE(builtin_sampler2DShadow, e_sampler2DShadow);
  BUILTIN_TYPE(builtin_sampler2DArray, e_sampler2DArray);
  BUILTIN_TYPE(builtin_texture2DArray, e_texture2DArray);
  BUILTIN_TYPE(builtin_image2DArray, e_image2DArray);
  BUILTIN_TYPE(builtin_sampler2DArrayShadow, e_sampler2DArrayShadow);
  BUILTIN_TYPE(builtin_sampler2DMS, e_sampler2DMS);
  BUILTIN_TYPE(builtin_texture2DMS, e_texture2DMS);
  BUILTIN_TYPE(builtin_image2DMS, e_image2DMS);
  BUILTIN_TYPE(builtin_sampler2DMSArray, e_sampler2DMSArray);
  BUILTIN_TYPE(builtin_texture2DMSArray, e_texture2DMSArray);
  BUILTIN_TYPE(builtin_image2DMSArray, e_image2DMSArray);
  BUILTIN_TYPE(builtin_sampler3D, e_sampler3D);
  BUILTIN_TYPE(builtin_texture3D, e_texture3D);
  BUILTIN_TYPE(builtin_image3D, e_image3D);
  BUILTIN_TYPE(builtin_samplerCube, e_samplerCube);
  BUILTIN_TYPE(builtin_textureCube, e_textureCube);
  BUILTIN_TYPE(builtin_imageCube, e_imageCube);
  BUILTIN_TYPE(builtin_samplerCubeShadow, e_samplerCubeShadow);
  BUILTIN_TYPE(builtin_samplerCubeArray, e_samplerCubeArray);
  BUILTIN_TYPE(builtin_textureCubeArray, e_textureCubeArray);
  BUILTIN_TYPE(builtin_imageCubeArray, e_imageCubeArray);
  BUILTIN_TYPE(builtin_samplerCubeArrayShadow, e_samplerCubeArrayShadow);
  BUILTIN_TYPE(builtin_samplerBuffer, e_samplerBuffer);
  BUILTIN_TYPE(builtin_textureBuffer, e_textureBuffer);
  BUILTIN_TYPE(builtin_imageBuffer, e_imageBuffer);
  BUILTIN_TYPE(builtin_subpassInput, e_subpassInput);
  BUILTIN_TYPE(builtin_subpassInputMS, e_subpassInputMS);
  BUILTIN_TYPE(builtin_isampler1D, e_isampler1D);
  BUILTIN_TYPE(builtin_itexture1D, e_itexture1D);
  BUILTIN_TYPE(builtin_iimage1D, e_iimage1D);
  BUILTIN_TYPE(builtin_isampler1DArray, e_isampler1DArray);
  BUILTIN_TYPE(builtin_itexture1DArray, e_itexture1DArray);
  BUILTIN_TYPE(builtin_iimage1DArray, e_iimage1DArray);
  BUILTIN_TYPE(builtin_isampler2D, e_isampler2D);
  BUILTIN_TYPE(builtin_itexture2D, e_itexture2D);
  BUILTIN_TYPE(builtin_iimage2D, e_iimage2D);
  BUILTIN_TYPE(builtin_isampler2DArray, e_isampler2DArray);
  BUILTIN_TYPE(builtin_itexture2DArray, e_itexture2DArray);
  BUILTIN_TYPE(builtin_iimage2DArray, e_iimage2DArray);
  BUILTIN_TYPE(builtin_isampler2DMS, e_isampler2DMS);
  BUILTIN_TYPE(builtin_itexture2DMS, e_itexture2DMS);
  BUILTIN_TYPE(builtin_iimage2DMS, e_iimage2DMS);
  BUILTIN_TYPE(builtin_isampler2DMSArray, e_isampler2DMSArray);
  BUILTIN_TYPE(builtin_itexture2DMSArray, e_itexture2DMSArray);
  BUILTIN_TYPE(builtin_iimage2DMSArray, e_iimage2DMSArray);
  BUILTIN_TYPE(builtin_isampler3D, e_isampler3D);
  BUILTIN_TYPE(builtin_itexture3D, e_itexture3D);
  BUILTIN_TYPE(builtin_iimage3D, e_iimage3D);
  BUILTIN_TYPE(builtin_isamplerCube, e_isamplerCube);
  BUILTIN_TYPE(builtin_itextureCube, e_itextureCube);
  BUILTIN_TYPE(builtin_iimageCube, e_iimageCube);
  BUILTIN_TYPE(builtin_isamplerCubeArray, e_isamplerCubeArray);
  BUILTIN_TYPE(builtin_itextureCubeArray, e_itextureCubeArray);
  BUILTIN_TYPE(builtin_iimageCubeArray, e_iimageCubeArray);
  BUILTIN_TYPE(builtin_isamplerBuffer, e_isamplerBuffer);
  BUILTIN_TYPE(builtin_itextureBuffer, e_itextureBuffer);
  BUILTIN_TYPE(builtin_iimageBuffer, e_iimageBuffer);
  BUILTIN_TYPE(builtin_isubpassInput, e_isubpassInput);
  BUILTIN_TYPE(builtin_isubpassInputMS, e_isubpassInputMS);
  BUILTIN_TYPE(builtin_usampler1D, e_usampler1D);
  BUILTIN_TYPE(builtin_utexture1D, e_utexture1D);
  BUILTIN_TYPE(builtin_uimage1D, e_uimage1D);
  BUILTIN_TYPE(builtin_usampler1DArray, e_usampler1DArray);
  BUILTIN_TYPE(builtin_utexture1DArray, e_utexture1DArray);
  BUILTIN_TYPE(builtin_uimage1DArray, e_uimage1DArray);
  BUILTIN_TYPE(builtin_usampler2D, e_usampler2D);
  BUILTIN_TYPE(builtin_utexture2D, e_utexture2D);
  BUILTIN_TYPE(builtin_uimage2D, e_uimage2D);
  BUILTIN_TYPE(builtin_usampler2DArray, e_usampler2DArray);
  BUILTIN_TYPE(builtin_utexture2DArray, e_utexture2DArray);
  BUILTIN_TYPE(builtin_uimage2DArray, e_uimage2DArray);
  BUILTIN_TYPE(builtin_usampler2DMS, e_usampler2DMS);
  BUILTIN_TYPE(builtin_utexture2DMS, e_utexture2DMS);
  BUILTIN_TYPE(builtin_uimage2DMS, e_uimage2DMS);
  BUILTIN_TYPE(builtin_usampler2DMSArray, e_usampler2DMSArray);
  BUILTIN_TYPE(builtin_utexture2DMSArray, e_utexture2DMSArray);
  BUILTIN_TYPE(builtin_uimage2DMSArray, e_uimage2DMSArray);
  BUILTIN_TYPE(builtin_usampler3D, e_usampler3D);
  BUILTIN_TYPE(builtin_utexture3D, e_utexture3D);
  BUILTIN_TYPE(builtin_uimage3D, e_uimage3D);
  BUILTIN_TYPE(builtin_usamplerCube, e_usamplerCube);
  BUILTIN_TYPE(builtin_utextureCube, e_utextureCube);
  BUILTIN_TYPE(builtin_uimageCube, e_uimageCube);
  BUILTIN_TYPE(builtin_usamplerCubeArray, e_usamplerCubeArray);
  BUILTIN_TYPE(builtin_utextureCubeArray, e_utextureCubeArray);
  BUILTIN_TYPE(builtin_uimageCubeArray, e_uimageCubeArray);
  BUILTIN_TYPE(builtin_usamplerBuffer, e_usamplerBuffer);
  BUILTIN_TYPE(builtin_utextureBuffer, e_utextureBuffer);
  BUILTIN_TYPE(builtin_uimageBuffer, e_uimageBuffer);
  BUILTIN_TYPE(builtin_usubpassInput, e_usubpassInput);
  BUILTIN_TYPE(builtin_usubpassInputMS, e_usubpassInputMS);
  BUILTIN_TYPE(builtin_sampler, e_sampler);
  template<typename... T>
  [[nodiscard]] static anton::IList<ast::Fn_Parameter>
  construct_parameter_list(T... parameters)
  {
    anton::IList<ast::Fn_Parameter> list;
    (..., list.insert_back(parameters));
    return list;
  }

  anton::Flat_Hash_Map<anton::String_View, ast::Overload_Group*>
  get_builtin_functions_declarations(Allocator* const allocator)
  {
    // Overallocate to lower pressure.
    anton::Flat_Hash_Map<anton::String_View, ast::Overload_Group*> groups(
      anton::reserve, 298, allocator);
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "radians"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "radians"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("pdegrees"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "radians"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("pdegrees"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "radians"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("pdegrees"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "radians"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("pdegrees"_sv, &builtin_vec4))));
      groups.emplace("radians"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "degrees"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "degrees"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("pradians"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "degrees"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("pradians"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "degrees"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("pradians"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "degrees"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("pradians"_sv, &builtin_vec4))));
      groups.emplace("degrees"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "sin"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "sin"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sin"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sin"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sin"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec4))));
      groups.emplace("sin"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "cos"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "cos"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cos"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cos"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cos"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec4))));
      groups.emplace("cos"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "tan"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "tan"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "tan"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "tan"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "tan"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("angle"_sv, &builtin_vec4))));
      groups.emplace("tan"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "asin"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "asin"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "asin"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "asin"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "asin"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("asin"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "acos"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "acos"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "acos"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "acos"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "acos"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("acos"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "atan"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("y"_sv, &builtin_float),
                                 ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("y"_sv, &builtin_vec2),
                                 ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("y"_sv, &builtin_vec3),
                                 ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("y"_sv, &builtin_vec4),
                                 ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("y_over_x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("y_over_x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("y_over_x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atan"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("y_over_x"_sv, &builtin_vec4))));
      groups.emplace("atan"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "sinh"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "sinh"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sinh"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sinh"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sinh"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("sinh"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "cosh"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "cosh"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cosh"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cosh"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cosh"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("cosh"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "tanh"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "tanh"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "tanh"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "tanh"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "tanh"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("tanh"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "asinh"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "asinh"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "asinh"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "asinh"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "asinh"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("asinh"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "acosh"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "acosh"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "acosh"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "acosh"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "acosh"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("acosh"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "atanh"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atanh"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atanh"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atanh"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atanh"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("atanh"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "pow"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "pow"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "pow"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "pow"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "pow"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      groups.emplace("pow"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "exp"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("exp"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "log"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "log"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "log"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "log"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "log"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("log"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "exp2"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp2"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp2"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp2"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "exp2"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("exp2"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "log2"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "log2"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "log2"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "log2"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "log2"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      groups.emplace("log2"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "sqrt"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sqrt"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("sqrt"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "inv_sqrt"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inv_sqrt"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("inv_sqrt"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "abs"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "abs"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4))));
      groups.emplace("abs"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "sign"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "sign"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4))));
      groups.emplace("sign"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "floor"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "floor"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("floor"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "trunc"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "trunc"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("trunc"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "round"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("round"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "round_even"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "round_even"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("round_even"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "ceil"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "ceil"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("ceil"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "fract"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fract"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("fract"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "mod"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "mod"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      groups.emplace("mod"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "min"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_int),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uint),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "min"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("min"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "max"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_int),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uint),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "max"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("max"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "clamp"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float),
                                 ALLOC_PARAM("min_val"_sv, &builtin_float),
                                 ALLOC_PARAM("max_val"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("min_val"_sv, &builtin_float),
                                 ALLOC_PARAM("max_val"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("min_val"_sv, &builtin_float),
                                 ALLOC_PARAM("max_val"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("min_val"_sv, &builtin_float),
                                 ALLOC_PARAM("max_val"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double),
                                 ALLOC_PARAM("min_val"_sv, &builtin_double),
                                 ALLOC_PARAM("max_val"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("min_val"_sv, &builtin_double),
                                 ALLOC_PARAM("max_val"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("min_val"_sv, &builtin_double),
                                 ALLOC_PARAM("max_val"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("min_val"_sv, &builtin_double),
                                 ALLOC_PARAM("max_val"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_int),
                                 ALLOC_PARAM("min_val"_sv, &builtin_int),
                                 ALLOC_PARAM("max_val"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("min_val"_sv, &builtin_int),
                                 ALLOC_PARAM("max_val"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("min_val"_sv, &builtin_int),
                                 ALLOC_PARAM("max_val"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("min_val"_sv, &builtin_int),
                                 ALLOC_PARAM("max_val"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uint),
                                 ALLOC_PARAM("min_val"_sv, &builtin_uint),
                                 ALLOC_PARAM("max_val"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("min_val"_sv, &builtin_uint),
                                 ALLOC_PARAM("max_val"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("min_val"_sv, &builtin_uint),
                                 ALLOC_PARAM("max_val"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "clamp"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("min_val"_sv, &builtin_uint),
                                 ALLOC_PARAM("max_val"_sv, &builtin_uint))));
      groups.emplace("clamp"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "length"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "length"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("length"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "distance"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_float),
                                 ALLOC_PARAM("p1"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_vec2),
                                 ALLOC_PARAM("p1"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_vec3),
                                 ALLOC_PARAM("p1"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_vec4),
                                 ALLOC_PARAM("p1"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_double),
                                 ALLOC_PARAM("p1"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("p1"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("p1"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "distance"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("p0"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("p1"_sv, &builtin_dvec4))));
      groups.emplace("distance"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "dot"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float),
                                 ALLOC_PARAM("y"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double),
                                 ALLOC_PARAM("y"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dot"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      groups.emplace("dot"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "cross"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "cross"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "cross"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      groups.emplace("cross"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "normalize"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "normalize"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4))));
      groups.emplace("normalize"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "faceforward"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_float),
                                 ALLOC_PARAM("I"_sv, &builtin_float),
                                 ALLOC_PARAM("Nref"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_vec2),
                                 ALLOC_PARAM("I"_sv, &builtin_vec2),
                                 ALLOC_PARAM("Nref"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_vec3),
                                 ALLOC_PARAM("I"_sv, &builtin_vec3),
                                 ALLOC_PARAM("Nref"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_vec4),
                                 ALLOC_PARAM("I"_sv, &builtin_vec4),
                                 ALLOC_PARAM("Nref"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_double),
                                 ALLOC_PARAM("I"_sv, &builtin_double),
                                 ALLOC_PARAM("Nref"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("I"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("Nref"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("I"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("Nref"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "faceforward"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("N"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("I"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("Nref"_sv, &builtin_dvec4))));
      groups.emplace("faceforward"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "reflect"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_float),
                                 ALLOC_PARAM("N"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_vec2),
                                 ALLOC_PARAM("N"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_vec3),
                                 ALLOC_PARAM("N"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_vec4),
                                 ALLOC_PARAM("N"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_double),
                                 ALLOC_PARAM("N"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("N"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("N"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("N"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_float),
                                 ALLOC_PARAM("N"_sv, &builtin_float),
                                 ALLOC_PARAM("eta"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_vec2),
                                 ALLOC_PARAM("N"_sv, &builtin_vec2),
                                 ALLOC_PARAM("eta"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_vec3),
                                 ALLOC_PARAM("N"_sv, &builtin_vec3),
                                 ALLOC_PARAM("eta"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_vec4),
                                 ALLOC_PARAM("N"_sv, &builtin_vec4),
                                 ALLOC_PARAM("eta"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_double),
                                 ALLOC_PARAM("N"_sv, &builtin_double),
                                 ALLOC_PARAM("eta"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("N"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("eta"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("N"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("eta"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "reflect"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("I"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("N"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("eta"_sv, &builtin_double))));
      groups.emplace("reflect"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "matrix_comp_mult"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat2),
                                 ALLOC_PARAM("y"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat3),
                                 ALLOC_PARAM("y"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat4),
                                 ALLOC_PARAM("y"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("y"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("y"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("y"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("y"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("y"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "matrix_comp_mult"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("y"_sv, &builtin_mat4x3))));
      groups.emplace("matrix_comp_mult"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "outer_product"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec2),
                                 ALLOC_PARAM("r"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec3),
                                 ALLOC_PARAM("r"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec4),
                                 ALLOC_PARAM("r"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec3),
                                 ALLOC_PARAM("r"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec2),
                                 ALLOC_PARAM("r"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec4),
                                 ALLOC_PARAM("r"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec2),
                                 ALLOC_PARAM("r"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec4),
                                 ALLOC_PARAM("r"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "outer_product"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("c"_sv, &builtin_vec3),
                                 ALLOC_PARAM("r"_sv, &builtin_vec4))));
      groups.emplace("outer_product"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "transpose"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "transpose"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat3x4))));
      groups.emplace("transpose"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "determinant"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "determinant"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "determinant"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "determinant"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat4))));
      groups.emplace("determinant"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "inverse"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "inverse"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inverse"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "inverse"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("m"_sv, &builtin_mat4))));
      groups.emplace("inverse"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "less_than"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("less_than"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "less_than_equal"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "less_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("less_than_equal"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "greater_than"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("greater_than"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "greater_than_equal"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "greater_than_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("greater_than_equal"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "equal"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("equal"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "not_equal"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec2),
                                 ALLOC_PARAM("y"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec3),
                                 ALLOC_PARAM("y"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_vec4),
                                 ALLOC_PARAM("y"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not_equal"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4))));
      groups.emplace("not_equal"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "any"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "any"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "any"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "any"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec4))));
      groups.emplace("any"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "all"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "all"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "all"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "all"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec4))));
      groups.emplace("all"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "not"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "not"_sv, &builtin_bvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not"_sv, &builtin_bvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "not"_sv, &builtin_bvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_bvec4))));
      groups.emplace("not"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "uadd_carry"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "uadd_carry"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uint),
                                 ALLOC_PARAM("y"_sv, &builtin_uint),
                                 ALLOC_PARAM("carry"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "uadd_carry"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("carry"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "uadd_carry"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("carry"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "uadd_carry"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("carry"_sv, &builtin_uvec4))));
      groups.emplace("uadd_carry"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "usub_borrow"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "usub_borrow"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uint),
                                 ALLOC_PARAM("y"_sv, &builtin_uint),
                                 ALLOC_PARAM("borrow"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "usub_borrow"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("borrow"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "usub_borrow"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("borrow"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "usub_borrow"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("borrow"_sv, &builtin_uvec4))));
      groups.emplace("usub_borrow"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "umul_extended"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "umul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uint),
                                 ALLOC_PARAM("y"_sv, &builtin_uint),
                                 ALLOC_PARAM("msb"_sv, &builtin_uint),
                                 ALLOC_PARAM("lsb"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "umul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("msb"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("lsb"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "umul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("msb"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("lsb"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "umul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("y"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("msb"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("lsb"_sv, &builtin_uvec4))));
      groups.emplace("umul_extended"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "imul_extended"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "imul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_int),
                                 ALLOC_PARAM("y"_sv, &builtin_int),
                                 ALLOC_PARAM("msb"_sv, &builtin_int),
                                 ALLOC_PARAM("lsb"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "imul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("msb"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("lsb"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "imul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("msb"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("lsb"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "imul_extended"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("x"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("y"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("msb"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("lsb"_sv, &builtin_ivec4))));
      groups.emplace("imul_extended"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "bitfield_extract"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uint),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_extract"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      groups.emplace("bitfield_extract"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "bitfield_insert"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_int),
                                 ALLOC_PARAM("insert"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("insert"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("insert"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("insert"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uint),
                                 ALLOC_PARAM("insert"_sv, &builtin_uint),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("insert"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("insert"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_insert"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("insert"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bits"_sv, &builtin_int))));
      groups.emplace("bitfield_insert"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "bitfield_reverse"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bitfield_reverse"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec4))));
      groups.emplace("bitfield_reverse"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "bit_count"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "bit_count"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec4))));
      groups.emplace("bit_count"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "find_LSB"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_LSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec4))));
      groups.emplace("find_LSB"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "find_MSB"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "find_MSB"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("base"_sv, &builtin_uvec4))));
      groups.emplace("find_MSB"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_size"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeShadow),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec3,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArrayShadow),
          ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec2,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_size"_sv, &builtin_ivec3,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerBuffer))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerBuffer))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerBuffer))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_sampler2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_isampler2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_size"_sv, &builtin_ivec3,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_usampler2DMSArray))));
      groups.emplace("texture_size"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_query_lod"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_lod"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_query_lod"_sv, &builtin_vec2,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3))));
      groups.emplace("texture_query_lod"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_query_levels"_sv);
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler3D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler3D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler3D))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_samplerCubeArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_isamplerCubeArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_usamplerCubeArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_samplerCubeShadow))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_sampler1DArrayShadow))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_sampler2DArrayShadow))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_query_levels"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_samplerCubeArrayShadow))));
      groups.emplace("texture_query_levels"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_samples"_sv);
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_samples"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_sampler2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_samples"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_isampler2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_samples"_sv, &builtin_int,
                       construct_parameter_list(ALLOC_PARAM(
                         "sampler"_sv, &builtin_usampler2DMSArray))));
      groups.emplace("texture_samples"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "texture"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec4),
          ALLOC_PARAM("compare"_sv, &builtin_float))));
      groups.emplace("texture"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_proj"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      groups.emplace("texture_proj"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_lod"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      groups.emplace("texture_lod"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_int),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_int),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_int),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_int),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offset"_sv, &builtin_int),
          ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_offset"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec4),
          ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      groups.emplace("texture_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texel_fetch"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerBuffer),
                         ALLOC_PARAM("P"_sv, &builtin_int),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerBuffer),
                         ALLOC_PARAM("P"_sv, &builtin_int),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerBuffer),
                         ALLOC_PARAM("P"_sv, &builtin_int),
                         ALLOC_PARAM("lod"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DMS),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DMS),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DMS),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      groups.emplace("texel_fetch"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texel_fetch_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texel_fetch_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_int),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("lod"_sv, &builtin_int),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("lod"_sv, &builtin_int),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("lod"_sv, &builtin_int),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("lod"_sv, &builtin_int),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("lod"_sv, &builtin_int),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texel_fetch_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("lod"_sv, &builtin_int),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      groups.emplace("texel_fetch_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_proj_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_int),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("offset"_sv, &builtin_int),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("bias"_sv, &builtin_float))));
      groups.emplace("texture_proj_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_lod_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_lod_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_lod_offset"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("lod"_sv, &builtin_float),
          ALLOC_PARAM("offset"_sv, &builtin_int))));
      groups.emplace("texture_lod_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_proj_lod"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_lod"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_lod"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float))));
      groups.emplace("texture_proj_lod"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_proj_lod_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_lod_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("lod"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_lod_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_lod_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("lod"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      groups.emplace("texture_proj_lod_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_grad"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("dPdx"_sv, &builtin_float),
          ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec4),
          ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
          ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      groups.emplace("texture_grad"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_grad_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_grad_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler1DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("dPdx"_sv, &builtin_float),
          ALLOC_PARAM("dPdy"_sv, &builtin_float),
          ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_grad_offset"_sv, &builtin_float,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec4),
          ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
          ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
          ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      groups.emplace("texture_grad_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_proj_grad"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_grad"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_grad"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2))));
      groups.emplace("texture_proj_grad"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_proj_grad_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler1D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_float),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_proj_grad_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler3D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec4),
                                 ALLOC_PARAM("dPdx"_sv, &builtin_vec3),
                                 ALLOC_PARAM("dPdy"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_grad_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler1DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_float),
                         ALLOC_PARAM("dPdy"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_proj_grad_offset"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("dPdx"_sv, &builtin_vec2),
                         ALLOC_PARAM("dPdy"_sv, &builtin_vec2),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      groups.emplace("texture_proj_grad_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_gather"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCube),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usamplerCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec4),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("refZ"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("refZ"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("refZ"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_samplerCubeArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec4),
          ALLOC_PARAM("refZ"_sv, &builtin_float))));
      groups.emplace("texture_gather"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_gather_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
                                 ALLOC_PARAM("P"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_vec3),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2),
                         ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("texture_gather_offset"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
                         ALLOC_PARAM("P"_sv, &builtin_vec2),
                         ALLOC_PARAM("refZ"_sv, &builtin_float),
                         ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offset"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("refZ"_sv, &builtin_float),
          ALLOC_PARAM("offset"_sv, &builtin_ivec2))));
      groups.emplace("texture_gather_offset"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "texture_gather_offsets"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_ivec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_uvec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2D),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))),
          ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_ivec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_isampler2D),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))),
          ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_uvec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_usampler2D),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))),
          ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_ivec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_uvec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArray),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))),
          ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_ivec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_isampler2DArray),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))),
          ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_uvec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_usampler2DArray),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))),
          ALLOC_PARAM("comp"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec2),
          ALLOC_PARAM("refZ"_sv, &builtin_float),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "texture_gather_offsets"_sv, &builtin_vec4,
        construct_parameter_list(
          ALLOC_PARAM("sampler"_sv, &builtin_sampler2DArrayShadow),
          ALLOC_PARAM("P"_sv, &builtin_vec3),
          ALLOC_PARAM("refZ"_sv, &builtin_float),
          ALLOC_PARAM("offsets"_sv,
                      VUSH_ALLOCATE(ast::Type_Array, allocator, Source_Info{},
                                    &builtin_ivec2,
                                    VUSH_ALLOCATE(ast::Lt_Integer, allocator,
                                                  ast::lt_integer_i32, 4,
                                                  Source_Info{}))))));
      groups.emplace("texture_gather_offsets"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_add"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_add"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_min"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_min"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_max"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_max"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_and"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_and"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_or"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_or"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_xor"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_xor"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_exchange"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_exchange"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "atomic_comp_swap"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("mem"_sv, &builtin_uint),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      groups.emplace("atomic_comp_swap"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_size"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCube))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCube))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image1DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_size"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec2,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_ivec3,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageBuffer))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageBuffer))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_size"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageBuffer))));
      groups.emplace("image_size"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_samples"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_samples"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMS))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_samples"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray))));
      groups.emplace("image_samples"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_load"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_load"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_load"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      groups.emplace("image_load"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_store"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("sample"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("sample"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_store"_sv, &builtin_void,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("sample"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_int),
                         ALLOC_PARAM("sample"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_vec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_int),
                         ALLOC_PARAM("sample"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_ivec4))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_store"_sv, &builtin_void,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_int),
                         ALLOC_PARAM("sample"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uvec4))));
      groups.emplace("image_store"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_add"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_add"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_add"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_add"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_min"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_min"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_min"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_min"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_max"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_max"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_max"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_max"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_and"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_and"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_and"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_and"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_or"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_or"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_or"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_or"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_xor"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_xor"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_xor"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_xor"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_exchange"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_exchange"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_exchange"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_float))));
      groups.emplace("image_atomic_exchange"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "image_atomic_comp_swap"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_uint),
                                 ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_uint,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("compare"_sv, &builtin_uint),
                         ALLOC_PARAM("data"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage3D),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageCube),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_imageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimageBuffer),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_imageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimageCubeArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage1D),
                                 ALLOC_PARAM("P"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image1DArray),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage1DArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec2),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_image2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_iimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "image_atomic_comp_swap"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("image"_sv, &builtin_uimage2DMS),
                                 ALLOC_PARAM("P"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int),
                                 ALLOC_PARAM("compare"_sv, &builtin_int),
                                 ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_image2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_iimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("image_atomic_comp_swap"_sv, &builtin_int,
                       construct_parameter_list(
                         ALLOC_PARAM("image"_sv, &builtin_uimage2DMSArray),
                         ALLOC_PARAM("P"_sv, &builtin_ivec3),
                         ALLOC_PARAM("sample"_sv, &builtin_int),
                         ALLOC_PARAM("compare"_sv, &builtin_int),
                         ALLOC_PARAM("data"_sv, &builtin_int))));
      groups.emplace("image_atomic_comp_swap"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "dFdx"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("dFdx"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "dFdy"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("dFdy"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "dFdx_fine"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_fine"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_fine"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_fine"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_fine"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("dFdx_fine"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "dFdy_fine"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_fine"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_fine"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_fine"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_fine"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("dFdy_fine"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "dFdx_coarse"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_coarse"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_coarse"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_coarse"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdx_coarse"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("dFdx_coarse"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "dFdy_coarse"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_coarse"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_coarse"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_coarse"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "dFdy_coarse"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("dFdy_coarse"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "fwidth"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("fwidth"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "fwidth_fine"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_fine"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_fine"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_fine"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_fine"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("fwidth_fine"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "fwidth_coarse"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_coarse"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_coarse"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_coarse"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "fwidth_coarse"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("p"_sv, &builtin_vec4))));
      groups.emplace("fwidth_coarse"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "interpolate_at_centroid"_sv);
      g->overloads.push_back(
        ALLOC_FUNCTION("interpolate_at_centroid"_sv, &builtin_float,
                       construct_parameter_list(
                         ALLOC_PARAM("interpolant"_sv, &builtin_float))));
      g->overloads.push_back(
        ALLOC_FUNCTION("interpolate_at_centroid"_sv, &builtin_vec2,
                       construct_parameter_list(
                         ALLOC_PARAM("interpolant"_sv, &builtin_vec2))));
      g->overloads.push_back(
        ALLOC_FUNCTION("interpolate_at_centroid"_sv, &builtin_vec3,
                       construct_parameter_list(
                         ALLOC_PARAM("interpolant"_sv, &builtin_vec3))));
      g->overloads.push_back(
        ALLOC_FUNCTION("interpolate_at_centroid"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("interpolant"_sv, &builtin_vec4))));
      groups.emplace("interpolate_at_centroid"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "interpolate_at_sample"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_sample"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_float),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_sample"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_vec2),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_sample"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_vec3),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_sample"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_vec4),
                                 ALLOC_PARAM("sample"_sv, &builtin_int))));
      groups.emplace("interpolate_at_sample"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "interpolate_at_offset"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_offset"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_float),
                                 ALLOC_PARAM("offset"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_offset"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_vec2),
                                 ALLOC_PARAM("offset"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_offset"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_vec3),
                                 ALLOC_PARAM("offset"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "interpolate_at_offset"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("interpolant"_sv, &builtin_vec4),
                                 ALLOC_PARAM("offset"_sv, &builtin_vec2))));
      groups.emplace("interpolate_at_offset"_sv, g);
    }
    {
      auto g =
        VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator, "barrier"_sv);
      g->overloads.push_back(ALLOC_FUNCTION("barrier"_sv, &builtin_void,
                                            construct_parameter_list()));
      groups.emplace("barrier"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "memory_barrier"_sv);
      g->overloads.push_back(ALLOC_FUNCTION("memory_barrier"_sv, &builtin_void,
                                            construct_parameter_list()));
      groups.emplace("memory_barrier"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "memory_barrier_atomic_counter"_sv);
      g->overloads.push_back(ALLOC_FUNCTION("memory_barrier_atomic_counter"_sv,
                                            &builtin_void,
                                            construct_parameter_list()));
      groups.emplace("memory_barrier_atomic_counter"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "memory_barrier_buffer"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "memory_barrier_buffer"_sv, &builtin_void, construct_parameter_list()));
      groups.emplace("memory_barrier_buffer"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "memory_barrier_shared"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "memory_barrier_shared"_sv, &builtin_void, construct_parameter_list()));
      groups.emplace("memory_barrier_shared"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "memory_barrier_image"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "memory_barrier_image"_sv, &builtin_void, construct_parameter_list()));
      groups.emplace("memory_barrier_image"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "group_memory_barrier"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "group_memory_barrier"_sv, &builtin_void, construct_parameter_list()));
      groups.emplace("group_memory_barrier"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "subpass_load"_sv);
      g->overloads.push_back(
        ALLOC_FUNCTION("subpass_load"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("subpass"_sv, &builtin_subpassInput))));
      g->overloads.push_back(
        ALLOC_FUNCTION("subpass_load"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("subpass"_sv, &builtin_isubpassInput))));
      g->overloads.push_back(
        ALLOC_FUNCTION("subpass_load"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("subpass"_sv, &builtin_usubpassInput))));
      g->overloads.push_back(
        ALLOC_FUNCTION("subpass_load"_sv, &builtin_vec4,
                       construct_parameter_list(
                         ALLOC_PARAM("subpass"_sv, &builtin_subpassInputMS),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("subpass_load"_sv, &builtin_ivec4,
                       construct_parameter_list(
                         ALLOC_PARAM("subpass"_sv, &builtin_isubpassInputMS),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      g->overloads.push_back(
        ALLOC_FUNCTION("subpass_load"_sv, &builtin_uvec4,
                       construct_parameter_list(
                         ALLOC_PARAM("subpass"_sv, &builtin_usubpassInputMS),
                         ALLOC_PARAM("sample"_sv, &builtin_int))));
      groups.emplace("subpass_load"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "any_invocation"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "any_invocation"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_bool))));
      groups.emplace("any_invocation"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "all_invocations"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "all_invocations"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_bool))));
      groups.emplace("all_invocations"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "all_invocations_equal"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "all_invocations_equal"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_bool))));
      groups.emplace("all_invocations_equal"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator+"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator+"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      groups.emplace("operator+"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator-"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator-"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_dmat4x3))));
      groups.emplace("operator-"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator*"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator*"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      groups.emplace("operator*"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator/"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_float,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_double,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_vec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_mat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat2x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat3x4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4x2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator/"_sv, &builtin_dmat4x3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      groups.emplace("operator/"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator%"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator%"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      groups.emplace("operator%"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator>"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      groups.emplace("operator>"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator>="_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      groups.emplace("operator>="_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator<"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      groups.emplace("operator<"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator<="_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      groups.emplace("operator<="_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator=="_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bool),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bool))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator=="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      groups.emplace("operator=="_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator!="_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bool),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bool))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_float),
                                 ALLOC_PARAM("rhs"_sv, &builtin_float))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_double),
                                 ALLOC_PARAM("rhs"_sv, &builtin_double))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_vec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_vec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_mat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_mat4x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat2x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat2x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat3x4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat3x4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!="_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_dmat4x3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_dmat4x3))));
      groups.emplace("operator!="_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator&&"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&&"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bool),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bool))));
      groups.emplace("operator&&"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator||"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator||"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bool),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bool))));
      groups.emplace("operator||"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator^^"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^^"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_bool),
                                 ALLOC_PARAM("rhs"_sv, &builtin_bool))));
      groups.emplace("operator^^"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator!"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator!"_sv, &builtin_bool,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_bool))));
      groups.emplace("operator!"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator~"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator~"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("value"_sv, &builtin_uvec4))));
      groups.emplace("operator~"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator<<"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator<<"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      groups.emplace("operator<<"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator>>"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator>>"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      groups.emplace("operator>>"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator&"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator&"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      groups.emplace("operator&"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator|"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator|"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      groups.emplace("operator|"_sv, g);
    }
    {
      auto g = VUSH_ALLOCATE(ast::Overload_Group, allocator, allocator,
                             "operator^"_sv);
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_int,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uint,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_ivec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_int))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_ivec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_int),
                                 ALLOC_PARAM("rhs"_sv, &builtin_ivec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec2),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec2,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec2))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec3),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec3,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec3))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uvec4),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uint))));
      g->overloads.push_back(ALLOC_FUNCTION(
        "operator^"_sv, &builtin_uvec4,
        construct_parameter_list(ALLOC_PARAM("lhs"_sv, &builtin_uint),
                                 ALLOC_PARAM("rhs"_sv, &builtin_uvec4))));
      groups.emplace("operator^"_sv, g);
    }
    return groups;
  }
} // namespace vush
