// This file has been autogenerated.
// Do not modify manually.
//
#include <anton/optional.hpp>
#include <vush_syntax/syntax.hpp>

namespace vush {
  SNOT const* get_type_named_mut(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::type_named, "node is not type_named");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::kw_mut) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_type_named_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::type_named, "node is not type_named");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::identifier) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member identifier not present in type_named");
  }

  SNOT const* get_type_array_mut(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::type_array, "node is not type_array");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::kw_mut) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_type_array_base(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::type_array, "node is not type_array");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::type_array_base) {
        return child->children;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member type_array_base not present in type_array");
  }

  SNOT const* get_type_array_size(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::type_array, "node is not type_array");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::type_array_size) {
        return child->children;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_attribute_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::attribute, "node is not attribute");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in attribute");
  }

  SNOT const* get_attribute_parameter_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::attribute, "node is not attribute");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_attribute_parameter_keyed_key(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::attribute_parameter_keyed,
                 "node is not attribute_parameter_keyed");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in attribute_parameter_keyed");
  }

  SNOT const* get_attribute_parameter_keyed_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::attribute_parameter_keyed,
                 "node is not attribute_parameter_keyed");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in attribute_parameter_keyed");
  }

  SNOT const* get_attribute_parameter_positional_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::attribute_parameter_positional,
                 "node is not attribute_parameter_positional");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in attribute_parameter_positional");
  }

  SNOT const* get_variable_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::variable, "node is not variable");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in variable");
  }

  SNOT const* get_variable_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::variable, "node is not variable");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in variable");
  }

  SNOT const* get_variable_type(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::variable, "node is not variable");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 4) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 4 not present in variable");
  }

  SNOT const* get_variable_initializer(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::variable, "node is not variable");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 6) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_decl_if_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_if, "node is not decl_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in decl_if");
  }

  SNOT const* get_decl_if_then_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_if, "node is not decl_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in decl_if");
  }

  SNOT const* get_decl_if_else_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_if, "node is not decl_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 4) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_decl_import_path(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_import,
                 "node is not decl_import");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in decl_import");
  }

  SNOT const* get_struct_field_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::struct_field,
                 "node is not struct_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in struct_field");
  }

  SNOT const* get_struct_field_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::struct_field,
                 "node is not struct_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in struct_field");
  }

  SNOT const* get_struct_field_type(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::struct_field,
                 "node is not struct_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in struct_field");
  }

  SNOT const* get_struct_field_initializer(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::struct_field,
                 "node is not struct_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 5) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_decl_struct_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_struct,
                 "node is not decl_struct");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in decl_struct");
  }

  SNOT const* get_decl_struct_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_struct,
                 "node is not decl_struct");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in decl_struct");
  }

  SNOT const* get_decl_struct_fields(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_struct,
                 "node is not decl_struct");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in decl_struct");
  }

  SNOT const* get_buffer_field_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::buffer_field,
                 "node is not buffer_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in buffer_field");
  }

  SNOT const* get_buffer_field_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::buffer_field,
                 "node is not buffer_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in buffer_field");
  }

  SNOT const* get_buffer_field_type(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::buffer_field,
                 "node is not buffer_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in buffer_field");
  }

  SNOT const* get_decl_buffer_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_buffer,
                 "node is not decl_buffer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in decl_buffer");
  }

  SNOT const* get_decl_buffer_pass(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_buffer,
                 "node is not decl_buffer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in decl_buffer");
  }

  SNOT const* get_decl_buffer_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_buffer,
                 "node is not decl_buffer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 4) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 4 not present in decl_buffer");
  }

  SNOT const* get_decl_buffer_fields(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_buffer,
                 "node is not decl_buffer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 5) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 5 not present in decl_buffer");
  }

  SNOT const* get_decl_function_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_function,
                 "node is not decl_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in decl_function");
  }

  SNOT const* get_decl_function_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_function,
                 "node is not decl_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in decl_function");
  }

  SNOT const* get_decl_function_parameter_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_function,
                 "node is not decl_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in decl_function");
  }

  SNOT const* get_decl_function_return_type(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_function,
                 "node is not decl_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 5) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 5 not present in decl_function");
  }

  SNOT const* get_decl_function_body(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_function,
                 "node is not decl_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 6) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 6 not present in decl_function");
  }

  SNOT const* get_decl_stage_function_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_stage_function,
                 "node is not decl_stage_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in decl_stage_function");
  }

  SNOT const* get_decl_stage_function_pass(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_stage_function,
                 "node is not decl_stage_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in decl_stage_function");
  }

  SNOT const* get_decl_stage_function_stage(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_stage_function,
                 "node is not decl_stage_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 4) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 4 not present in decl_stage_function");
  }

  SNOT const* get_decl_stage_function_parameter_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_stage_function,
                 "node is not decl_stage_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 5) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 5 not present in decl_stage_function");
  }

  SNOT const* get_decl_stage_function_body(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::decl_stage_function,
                 "node is not decl_stage_function");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 6) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 6 not present in decl_stage_function");
  }

  SNOT const* get_fn_parameter_attribute_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter,
                 "node is not fn_parameter");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in fn_parameter");
  }

  SNOT const* get_fn_parameter_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter,
                 "node is not fn_parameter");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in fn_parameter");
  }

  SNOT const* get_fn_parameter_type(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter,
                 "node is not fn_parameter");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in fn_parameter");
  }

  SNOT const* get_fn_parameter_source(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter,
                 "node is not fn_parameter");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 5) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_fn_parameter_if_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter_if,
                 "node is not fn_parameter_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in fn_parameter_if");
  }

  SNOT const* get_fn_parameter_if_then_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter_if,
                 "node is not fn_parameter_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in fn_parameter_if");
  }

  SNOT const* get_fn_parameter_if_else_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::fn_parameter_if,
                 "node is not fn_parameter_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 7) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 7 not present in fn_parameter_if");
  }

  SNOT const* get_expr_if_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_if, "node is not expr_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_if");
  }

  SNOT const* get_expr_if_then_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_if, "node is not expr_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in expr_if");
  }

  SNOT const* get_expr_if_else_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_if, "node is not expr_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 4) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 4 not present in expr_if");
  }

  SNOT const* get_expr_binary_lhs(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_binary,
                 "node is not expr_binary");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_binary");
  }

  SNOT const* get_expr_binary_operator(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_binary,
                 "node is not expr_binary");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_binary");
  }

  SNOT const* get_expr_binary_rhs(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_binary,
                 "node is not expr_binary");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in expr_binary");
  }

  SNOT const* get_expr_block_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_block, "node is not expr_block");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_block");
  }

  SNOT const* get_expr_identifier_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_identifier,
                 "node is not expr_identifier");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_identifier");
  }

  SNOT const* get_expr_prefix_operator(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_prefix,
                 "node is not expr_prefix");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_prefix");
  }

  SNOT const* get_expr_prefix_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_prefix,
                 "node is not expr_prefix");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_prefix");
  }

  SNOT const* get_expr_field_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_field, "node is not expr_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_field");
  }

  SNOT const* get_expr_field_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_field, "node is not expr_field");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in expr_field");
  }

  SNOT const* get_expr_index_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_index, "node is not expr_index");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_index");
  }

  SNOT const* get_expr_index_index(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_index, "node is not expr_index");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in expr_index");
  }

  SNOT const* get_expr_parentheses_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_parentheses,
                 "node is not expr_parentheses");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_parentheses");
  }

  SNOT const* get_field_initializer_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::field_initializer,
                 "node is not field_initializer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in field_initializer");
  }

  SNOT const* get_field_initializer_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::field_initializer,
                 "node is not field_initializer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in field_initializer");
  }

  SNOT const* get_index_initializer_index(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::index_initializer,
                 "node is not index_initializer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in index_initializer");
  }

  SNOT const* get_index_initializer_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::index_initializer,
                 "node is not index_initializer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in index_initializer");
  }

  SNOT const* get_basic_initializer_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::basic_initializer,
                 "node is not basic_initializer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in basic_initializer");
  }

  SNOT const* get_expr_init_type(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_init, "node is not expr_init");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_init");
  }

  SNOT const* get_expr_init_initializers(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_init, "node is not expr_init");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_init");
  }

  SNOT const* get_expr_call_identifier(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_call, "node is not expr_call");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_call");
  }

  SNOT const* get_expr_call_arguments(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_call, "node is not expr_call");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in expr_call");
  }

  SNOT const* get_expr_lt_bool_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_lt_bool,
                 "node is not expr_lt_bool");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_lt_bool");
  }

  SNOT const* get_expr_lt_integer_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_lt_integer,
                 "node is not expr_lt_integer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_lt_integer");
  }

  SNOT const* get_expr_lt_integer_suffix(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_lt_integer,
                 "node is not expr_lt_integer");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_expr_lt_float_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_lt_float,
                 "node is not expr_lt_float");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_lt_float");
  }

  SNOT const* get_expr_lt_float_suffix(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_lt_float,
                 "node is not expr_lt_float");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_expr_lt_string_value(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::expr_lt_string,
                 "node is not expr_lt_string");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in expr_lt_string");
  }

  SNOT const* get_stmt_assignment_lhs(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_assignment,
                 "node is not stmt_assignment");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in stmt_assignment");
  }

  SNOT const* get_stmt_assignment_operator(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_assignment,
                 "node is not stmt_assignment");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in stmt_assignment");
  }

  SNOT const* get_stmt_assignment_rhs(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_assignment,
                 "node is not stmt_assignment");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in stmt_assignment");
  }

  SNOT const* get_stmt_if_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_if, "node is not stmt_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in stmt_if");
  }

  SNOT const* get_stmt_if_then_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_if, "node is not stmt_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in stmt_if");
  }

  SNOT const* get_stmt_if_else_branch(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_if, "node is not stmt_if");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 4) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_stmt_switch_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_switch,
                 "node is not stmt_switch");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in stmt_switch");
  }

  SNOT const* get_stmt_switch_arm_list(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_switch,
                 "node is not stmt_switch");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in stmt_switch");
  }

  SNOT const* get_switch_arm_body(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::switch_arm, "node is not switch_arm");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::stmt_block) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member stmt_block not present in switch_arm");
  }

  SNOT const* get_stmt_while_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_while, "node is not stmt_while");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in stmt_while");
  }

  SNOT const* get_stmt_while_statements(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_while, "node is not stmt_while");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 2) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 2 not present in stmt_while");
  }

  SNOT const* get_stmt_for_variable(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_for, "node is not stmt_for");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::for_variable) {
        return child->children;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_stmt_for_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_for, "node is not stmt_for");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::for_condition) {
        return child->children;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_stmt_for_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_for, "node is not stmt_for");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::for_expression) {
        return child->children;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_stmt_for_body(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_for, "node is not stmt_for");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::stmt_block) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member stmt_block not present in stmt_for");
  }

  SNOT const* get_stmt_do_while_body(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_do_while,
                 "node is not stmt_do_while");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 1) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 1 not present in stmt_do_while");
  }

  SNOT const* get_stmt_do_while_condition(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_do_while,
                 "node is not stmt_do_while");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 3) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 3 not present in stmt_do_while");
  }

  SNOT const* get_stmt_return_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_return,
                 "node is not stmt_return");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(child->kind == SNOT_Kind::return_expression) {
        return child->children;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    return nullptr;
  }

  SNOT const* get_stmt_expression_expression(SNOT const* node)
  {
    ANTON_ASSERT(node->kind == SNOT_Kind::stmt_expression,
                 "node is not stmt_expression");
    SNOT* child = node->children;
    i64 index = 0;
    ANTON_UNUSED(index);
    while(child != nullptr) {
      if(index == 0) {
        return child;
      }
      child = anton::ilist_next(child);
      index += 1;
    }
    ANTON_UNREACHABLE("member 0 not present in stmt_expression");
  }
} // namespace vush
